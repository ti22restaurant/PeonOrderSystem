#! /usr/bin/env python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

from gi.repository import Gtk

from collections import deque

from peon_order_system.MenuItem import MenuItem

class MenuTreeView(Gtk.TreeView):
    
    def __init__(self):
        super(Gtk.TreeView, self).__init__()
        
        cell = Gtk.CellRendererText()
        
        name_column = Gtk.TreeViewColumn("Menu Item")
        self.append_column(name_column)
        name_column.pack_start(cell, True)
        name_column.add_attribute(cell,'text', 0)
                
        stars_column = Gtk.TreeViewColumn("Stars")
        self.append_column(stars_column)
        stars_column.pack_start(cell, True)
        stars_column.add_attribute(cell,'text', 1)
        
        pixbuf_cell = Gtk.CellRendererPixbuf()
        
        notes_column = Gtk.TreeViewColumn("Notes", pixbuf_cell, 
            stock_id = 2)
        self.append_column(notes_column)
        
    def item_added(self, path):
        selection = self.get_selection()
        selection.select_path(path)
        self.scroll_to_cell(path)
    
    def set_select_function(self, func):
        selection = self.get_selection()
        selection.set_select_function(func, None)

class Orders(MenuTreeView):
    """This object stores, accesses and manipulates the UI's treeview
        and order storage.
        
    num_of_tables=10 -- Represents the set of orders to be stored by the
    object.
    
    attrib: curr_order -- int that represents the number of the table
    being served.
    
    attrib: orders_list -- list that has auto generated OrderStore()
    objects. Number of indexes/OrderStore()'s added is equal to the 
    parameter num_of_tables, with a default of 10.
    
    """
    def __init__(self, parent, num_of_tables=10):
        super(Orders, self).__init__()
        parent.add(self)
        self.curr_order = 1
        self.orders_list = []
        
        # Populate orders_list with OrderStores
        for x in range(num_of_tables):
            self.orders_list.append(OrderStore())
        
        parent.show_all()
    
    def get_selected(self):
        """Gets information about current selected item; helper method
        for other functions.
        
        returns a 2-tuple of Gtk.TreeIter representing the items
        location and int representing the index
        
        """
        tree_selection = self.get_selection()
        
        # for TreeIter itr
        model, itr = tree_selection.get_selected()
        
        # for TreePath path, to generate int for index
        model, path = tree_selection.get_selected_rows()
        return itr, index
    
    def set_current_table(self, n):
        """Sets current order on table n.
        
        n -- int representing the table changed too
        """
        # n - 1 for 0 based indexing
        self.curr_order = n - 1
        self.set_model(self.orders_list[n - 1])
    
    def add(self, menu_item):
        """Adds the given MenuItem to the current order"""
        if self.curr_order is not None:
            order = self.orders_list[self.curr_order]
            itr = order.prepend(menu_item)
            path = order.get_path(itr)
        return self.item_added(path)
            
    
    def remove(self):
        """Removes the currently selected MenuItem from the order"""
        itr, index = self.get_selected()
        if self.curr_order is not None:
            return self.orders_list[self.curr_order].remove(itr, index)
        
    def update(self):
        """Updates MenuItem order display"""
        itr, index = self.get_selected()
        if self.curr_order is not None:
            return self.orders_list[self.curr_order].update_row(itr, 
                index)
    
    def get(self):
        """Gets the currently selected MenuItem.
        
        returns the MenuItem
        """
        itr, index = self.get_selected()
        return self.orders_list[self.curr_order].get_menu_item(index)
    
    def get_current_order(self):
        order_store = self.orders_list[self.curr_order]
        return order_store.get_current_menu_items()

class OrderStore(Gtk.TreeStore):
    """Stores selected MenuItems information, extends Gtk.ListStore.
    
    Designed to be used in conjunction with 
    """
	def __init__(self):
	    super(OrderStore, self).__init__(str, str, str)
	    self.__MenuItems = deque()
	    
	def get_menu_item(self, index):
	    """Gets the current menu item stored at index.
	    
	    returns MenuItem
	    """
	    q = self.__MenuItems
	    q.rotate(-index)
	    curr = q.popleft()
	    q.appendleft(curr)
	    q.rotate(index)
	    return curr
	
	def get_current_menu_items(self):
	    return self.__MenuItems
	
	def prepend(self, menu_item):
	    """Adds the MenuItem to the front of the ListStore"""
	    self.__MenuItems.appendleft(menu_item)
	    print self.__MenuItems
	    return super(OrderStore, self).prepend(None,
	        [menu_item.get_name(), str(menu_item.stars), 
	        self.get_note_icon(menu_item)])
	        
	def append(self, menu_item):
	    """Adds the MenuItem to the end of the ListStore"""
	    self.__MenuItems.append(menu_item)
	    print self.__MenuItems
	    return super(OrderStore, self).append(None,
	        [menu_item.get_name(), str(menu_item.stars), 
	        self.get_note_icon(menu_item)])
    
    def remove(self, itr, index):
        """Removes the item specified at the given index and TreeIter"""
        super(OrderStore, self).remove(itr)
        print self.__MenuItems
        q = self.__MenuItems
        print self.__MenuItems
        q.rotate(-index)
        curr = q.popleft()
        q.rotate(index)
        return curr
    
    def update_row(self, itr, index):
        """Updates the display of the item at the given index and
        TreeIter
        """
        menu_item = self.__MenuItems[index]
        self.set(itr, 0, menu_item.get_name(), 1, str(menu_item.stars),
            2, self.get_note_icon(menu_item))
            
        self.add_additional_information(itr, menu_item)
        
        
    def add_additional_information(self, itr, menu_item):
    
        children = self.iter_children(itr)
        while(children is not None):
            next = self.iter_next(children)
            super(OrderStore, self).remove(children)
            children = next
        
        options = menu_item.options
        if len(options) > 0:
            curr_itr = super(OrderStore, self).append(itr, 
                ("Added Items:", "", None))
            for item in options:
                super(OrderStore, self).prepend(curr_itr, 
                (item, "", None))
                
        if menu_item.has_note():
            curr_itr = super(OrderStore, self).append(itr,
                ("Note:", "", None))
            super(OrderStore, self).append(curr_itr, 
                (menu_item.notes, "", None))
        
        return menu_item
   
    def get_note_icon(self, menu_item):
	    if menu_item.has_note():
	        return Gtk.STOCK_DND_MULTIPLE
	    return Gtk.STOCK_FILE

        
