#! /usr/bin/env python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

from gi.repository import Gtk

from exe import path

""" Entry dialog class for displaying and manipulating a given 
    MenuItem's star rating.
    
    Generates an EntryDialogWindow that displays in the information,
    users interact with buttons to increment, decrement, cancel or accept
    the MenuItem's current star value.
"""
class StarEntryDialog():
    def __init__(self, parent, menu_item):
        """ Constructs object as transient of parent passed in.
            menu_item parameter is the current MenuItem to be operated
            on.
        """
    
        self.menu_item = menu_item
        
        # Depreciated. We need to eliminate XML usage and instead
        #   just hand generate the code for this entry dialog to
        #   display.
        xml_file = path.SYSTEM_XML_PATH + 'StarEntryDialog.ui'
        builder = Gtk.Builder()
        builder.add_from_file(xml_file)
        builder.connect_signals(self)
        
        self.dialog = builder.get_object('entryDialog')
        self.dialog.set_transient_for(parent)
        self.dialog.set_default_size(400, 400)
        
        label = builder.get_object('menuItemLabel')
        label.set_text(menu_item.get_name())
  
        self.display_stars(menu_item.stars,
            builder.get_object('numberOfStars'))
        
        self.dialog.run()
        
    
    def display_stars(self, stars, label):
        """sets the EntryDialog's window to display the given star value
            accepts parameter of current label that displays the star
            value.
        """
        label.set_text(str(stars))
    
    def confirm_data(self, label):
        """ Confirms currently displayed star value and stores it in
            the MenuItem's stars attribute. Dialog exits after this
            subroutine executes.
            
            Parameter accepted is current label that displays star
            value.
        """
        self.menu_item.stars = int(label.get_text())
        self.menu_item.__name = 'foobar'
        self.cancel_dialog(None)
        
    
    def increment_stars(self, label):
        """Increments the star value by one. This subroutine is called
            each time the increment star button is clicked. Parameter
            accepted is the current label that displays the star value.
        """
        self.display_stars(int(label.get_text()) + 1, label)
    
    def decrement_stars(self, label):
        """Decrements the star value by one. This subroutine is called
            each time the decrement star button is clicked. Parameter
            accepted is the current label that displays the star value.
        """
        self.display_stars(int(label.get_text()) - 1, label)
        
    def cancel_dialog(self, *args):
        """Exits the current dialog window. Displayed star value is
            not stored.
        """
        self.dialog.destroy()
        
        
    
        
        
	
